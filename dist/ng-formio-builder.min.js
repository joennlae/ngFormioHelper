!function i(s,a,l){function m(o,e){if(!a[o]){if(!s[o]){var n="function"==typeof require&&require;if(!e&&n)return n(o,!0);if(c)return c(o,!0);var r=new Error("Cannot find module '"+o+"'");throw r.code="MODULE_NOT_FOUND",r}var t=a[o]={exports:{}};s[o][0].call(t.exports,function(e){return m(s[o][1][e]||e)},t,t.exports,i,s,a,l)}return a[o].exports}for(var c="function"==typeof require&&require,e=0;e<l.length;e++)m(l[e]);return m}({1:[function(e,o,n){"use strict";angular.module("ngFormBuilderHelper").constant("FormActionController",["$scope","$stateParams","$state","Formio","FormioAlerts","FormioUtils","$q",function(o,n,r,t,i,s,a){o.actionUrl="",o.actionInfo=n.actionInfo||{settingsForm:{}},o.action={data:{settings:{},condition:{}}},o.newAction={name:"",title:"Select an Action"},o.availableActions={},o.addAction=function(){o.newAction.name?r.go(o.basePath+"form.action.add",{actionName:o.newAction.name}):i.onError({message:"You must select an action to add.",element:"action-select"})},o.formio.loadActions().then(function(e){o.actions=e},i.onError.bind(i)),o.formio.availableActions().then(function(e){e[0].name||e.shift(),e.unshift(o.newAction),o.availableActions=e});function l(e){return o.formio.actionInfo(e).then(function(e){if(e)return o.actionInfo=_.merge(o.actionInfo,e),o.actionInfo})}function m(n){n&&"sql"===n.name&&s.eachComponent(n.settingsForm.components,function(e){"settings[type]"===e.key&&0===JSON.parse(e.data.json).length&&i.warn('<i class="glyphicon glyphicon-exclamation-sign"></i> You do not have any SQL servers configured. You can add a SQL server in the config/default.json configuration.')}),n&&"email"===n.name&&s.eachComponent(n.settingsForm.components,function(e){"settings[transport]"===e.key&&JSON.parse(e.data.json).length<=1&&i.warn('<i class="glyphicon glyphicon-exclamation-sign"></i> You do not have any email transports configured. You need to add them in the config/default.json configuration.')}),n&&"auth"===n.name&&o.$watch("action.data.settings",function(o,e){o.hasOwnProperty("association")&&angular.element("#form-group-role").css("display","new"===o.association?"":"none"),o.hasOwnProperty("association")&&e.hasOwnProperty("association")&&o.association!==e.association&&(s.eachComponent(n.settingsForm.components,function(e){e.key&&"role"===e.key&&(e.validate=e.validate||{},e.validate.required="new"===o.association)}),o.role=o.role&&"new"===o.association||"")},!0),n&&"role"===n.name&&i.warn("<i class=\"glyphicon glyphicon-exclamation-sign\"></i> The Role Assignment Action requires a Resource Form component with the API key, 'submission', to modify existing Resource submissions.")}function c(e){return n.actionId?(o.actionUrl=o.formio.formUrl+"/action/"+n.actionId,new t(o.actionUrl).loadAction().then(function(e){return o.action=_.merge(o.action,{data:e}),l(e.name)})):(o.action=_.merge(o.action,{data:e}),o.action.data.settings={},a.when(o.actionInfo))}!n.actionInfo&&n.actionName?l(n.actionName).then(function(e){c(e.defaults).then(m)}):c(o.actionInfo.defaults).then(m),o.$on("formSubmission",function(e){e.stopPropagation(),i.addAlert({type:"success",message:"Action was updated."}),r.go(o.basePath+"form.actionIndex")}),o.$on("delete",function(e){e.stopPropagation(),i.addAlert({type:"success",message:"Action was deleted."}),r.go(o.basePath+"form.actionIndex")}),o.$on("cancel",function(e){e.stopPropagation(),r.go(o.basePath+"form.actionIndex")})}])},{}],2:[function(e,o,n){"use strict";angular.module("ngFormBuilderHelper").constant("FormController",["$scope","$stateParams","$state","Formio","FormioHelperConfig","FormioAlerts",function(r,t,i,o,e,s,n){r.loading=!0,r.hideComponents=[],r.submission={data:{}},r.isCopy=!(!t.components||!t.components.length),r.formId=t.formId,r.formUrl=e.appUrl+"/form",r.appUrl=e.appUrl;var a=e.tag||"common";r.showTransTitleIT=!1,r.showTransTitleFR=!1,r.transTitleIT="",r.transTitleFR="",r.formUrl+=t.formId?"/"+t.formId:"",r.formTags=[],r.form={display:"wizard",components:t.components||[],type:t.formType?t.formType:"form",publish:Boolean,relative:Boolean,lang:String,tags:[a],transTitle:{},modified:String,de:t.de||[],fr:t.fr||[],it:t.it||[]},r.publish=r.form.publish||!1,r.diary=r.form.diary||!1,r.relative=r.form.relative||!1,r.form.lang="DE",r.form.modified="2017-05-10T23:32:43.219Z",r.tags=[{text:a}],r.formio=new o(r.formUrl),r.formDisplays=[{name:"form",title:"Form"},{name:"wizard",title:"Wizard"}],r.langs=[{name:"DE",title:"DE"},{name:"FR",title:"FR"},{name:"IT",title:"IT"}],r.publicate=function(e){return r.publish=e,r.form.publish=e,r.form.token=o.getToken(),r.form.publish&&r.publish},r.isDiary=function(e){return r.diary=e,r.form.diary=e,r.form.token=o.getToken(),r.form.diary&&r.diary},r.isRelative=function(e){return r.relative=e,r.form.relative=e,console.log(r.form.relative),r.form.token=o.getToken(),r.form.relative&&r.relative},r.addTag=function(e){r.form&&(r.form.tags||(r.form.tags=[]),r.form.tags=r.formTags)},r.removeTag=function(e){r.form.tags=[]},r.copyEdit=function(){i.go(r.basePath+"createForm",{components:_.cloneDeep(r.form.components)})},r.copyOutsite=function(e){console.log(e.form),r.form=e.form,r.isCopy=!(!e.form.components||!e.form.components.length),r.isCopying=!0,i.go(e.basePath+"createForm",{de:_.cloneDeep(e.form.de),fr:_.cloneDeep(e.form.fr),it:_.cloneDeep(e.form.it),components:_.cloneDeep(e.form.components)})},r.translateTo=function(o){if(t.formId)r.formLoadPromise=r.formio.loadForm().then(function(e){switch(o){case"DE":r.form.components=e.de,r.form.de=e.de,r.translating=!1;break;case"IT":r.form.lang=o,r.form.components=e.de,r.form.it=e.de,r.translating=!0;break;case"FR":r.form.lang=o,r.form.components=e.de,r.form.fr=e.de,r.translating=!0}},s.onError.bind(s));else switch(o){case"DE":console.log(r.form),r.form.de||(r.form.de=[]),r.form.lang=o,r.form.components=r.form.de,r.translating=!1,r.showTransTitleIT=!1,r.showTransTitleFR=!1;break;case"IT":console.log(r.form),r.form.it||(r.form.it=[]),r.form.lang=o,r.form.components=r.form.de,r.translating=!0,r.showTransTitleFR=!1,r.showTransTitleIT=!0;break;case"FR":console.log(r.form),r.form.fr||(r.form.fr=[]),r.form.lang=o,r.form.components=r.form.de,r.translating=!0,r.showTransTitleIT=!1,r.showTransTitleFR=!0}};t.formId?r.formLoadPromise=r.formio.loadForm().then(function(e){e.display=e.display||"form";var o=(r.form=e).tags||[];switch(r.tags=o.map(function(e){return{text:e}}),e.lang){case"DE":r.form.components=e.de,r.translating=!1;break;case"IT":r.form.components=e.it,r.form.it=e.it,r.translating=!0,r.showTransTitleFR=!1,r.showTransTitleIT=!0;break;case"FR":r.form.components=e.fr,r.form.fr=e.fr,r.translating=!0,r.showTransTitleIT=!1,r.showTransTitleFR=!0}return r.relative=r.form.relative,r.formTags=r.form.tags,r.publish=r.form.publish,r.diary=r.form.diary,e},s.onError.bind(s)):r.form.submissionAccess||o.makeStaticRequest(o.getProjectUrl()+"/role?limit=1000").then(function(e){r.form.submissionAccess||angular.forEach(e,function(e){e.admin||e.default||(r.form.submissionAccess=[{type:"create_own",roles:[e._id]},{type:"read_own",roles:[e._id]},{type:"update_own",roles:[e._id]},{type:"delete_own",roles:[e._id]}])})}),r.titleChange=function(e){r.form.name&&r.form.name!==_.camelCase(e)||(r.form.name=_.camelCase(r.form.title)),r.$parent&&r.$parent.form&&(r.$parent.form.title=r.form.title)},r.transTitleChange=function(e){"FR"==r.form.lang&&(console.log(e),r.form.transTitle.fr=e),"IT"==r.form.lang&&(console.log(e),r.form.transTitle.it=e)},r.updateFormTags=function(){r.form.tags=r.tags.map(function(e){return e.text})},r.$watch("form.display",function(e){r.$broadcast("formDisplay",e)}),r.$on("formSubmission",function(e,o){s.addAlert({type:"success",message:"New submission added!"}),o._id&&i.go(r.basePath+"form.submission.view",{subId:o._id})}),r.$on("pagination:error",function(){r.loading=!1}),r.$on("pagination:loadPage",function(){r.loading=!1}),r.$on("formUpdate",function(e,o){r.form.components=o.components}),r.$on("formError",function(e,o){}),r.$watch("form.lang",function(e){console.log(r.form),function(o){if(t.formId)console.log(r.form),r.formLoadPromise=r.formio.loadForm().then(function(e){switch(o){case"DE":r.form.lang=o,r.form.components=e.de,r.form.de=e.de,r.translating=!1;break;case"IT":r.form.lang=o,r.form.components=e.it,r.form.it=e.it,r.translating=!0,e.transTitle.it&&(r.transTitleIT=e.transTitle.it),r.showTransTitleFR=!1,r.showTransTitleIT=!0;break;case"FR":r.form.lang=o,r.form.components=e.fr,r.form.fr=e.fr,r.translating=!0,e.transTitle.fr&&(r.transTitleFR=e.transTitle.fr),r.showTransTitleIT=!1,r.showTransTitleFR=!0}},s.onError.bind(s));else switch(o){case"DE":r.form.de||(r.form.de=[]),r.form.lang=o,r.isCopying||(r.form.components=r.form.de,r.translating=!1);break;case"IT":r.form.it,r.form.lang=o,r.isCopying||(r.form.components=r.form.it),r.translating=!0,r.showTransTitleFR=!1,r.showTransTitleIT=!0,console.log(r.form);break;case"FR":r.form.fr||(r.form.fr=[]),r.form.lang=o,r.isCopying||(r.form.components=r.form.fr),r.translating=!0,r.showTransTitleIT=!1,r.showTransTitleFR=!0,console.log(r.form)}}(e)}),r.$on("delete",function(){var e="form"===r.form.type?"Form ":"Resource ";s.addAlert({type:"success",message:e+r.form.name+" was deleted."}),i.go(r.basePath+"home")}),r.$on("cancel",function(){i.go(r.basePath+"form.view")}),r.cancel=function(){n.path("/")},r.saveForm=function(){switch(r.form.transTitle.de=r.form.title,console.log(r.form),r.form.lang){case"DE":console.log(r.form),r.form.de||(r.form.de=[]),r.form.de=r.form.components;break;case"IT":r.form.it||(r.form.it=[]),r.form.it=r.form.components;break;case"FR":r.form.fr||(r.form.fr=[]),r.form.fr=r.form.components}r.formio.saveForm(angular.copy(r.form)).then(function(e){var o=r.form.numPages;r.form=e,r.form.numPages=o,console.log(r.form.relative);var n=t.formId?"updated":"created";s.addAlert({type:"success",message:"Successfully "+n+" form!"}),i.go(r.basePath+"form.edit",{formId:e._id})},s.onError.bind(s))}}])},{}],3:[function(e,o,n){"use strict";angular.module("ngFormBuilderHelper").constant("FormIndexController",["$scope","FormioHelperConfig",function(e,o){e.forms=[],e.formsUrl=o.appUrl+"/form?type=form&tags="+o.tag,e.formsPerPage=o.perPage}])},{}],4:[function(e,o,n){"use strict";angular.module("ngFormBuilderHelper").constant("FormSubmissionController",["$scope","$stateParams","$state","Formio","FormioAlerts","$timeout",function(r,e,t,o,i,n){r.token=o.getToken(),r.submissionId=e.subId,r.submissionUrl=r.formUrl,r.submissionUrl+=e.subId?"/submission/"+e.subId:"",r.submissionData=o.submissionData,r.submission={},r.submissionId&&(r.formio=new o(r.submissionUrl),r.loadSubmissionPromise=r.formio.loadSubmission().then(function(e){return r.submission=e})),r.$on("formSubmission",function(e,o){e.stopPropagation();var n="put"===o.method?"updated":"created";i.addAlert({type:"success",message:"Submission was "+n+"."}),t.go(r.basePath+"form.submissionIndex",{formId:r.formId})}),r.$on("delete",function(e){e.stopPropagation(),i.addAlert({type:"success",message:"Submission was deleted."}),t.go(r.basePath+"form.submissionIndex")}),r.$on("cancel",function(e){e.stopPropagation(),t.go(r.basePath+"form.submission.view")}),r.$on("formError",function(e,o){e.stopPropagation(),i.onError(o)}),r.$on("rowSelect",function(e,o){n(function(){t.go(r.basePath+"form.submission.view",{subId:o._id})})}),r.$on("rowView",function(e,o){t.go(r.basePath+"form.submission.view",{subId:o._id})}),r.$on("submissionView",function(e,o){t.go(r.basePath+"form.submission.view",{subId:o._id})}),r.$on("submissionEdit",function(e,o){t.go(r.basePath+"form.submission.edit",{subId:o._id})}),r.$on("submissionDelete",function(e,o){t.go(r.basePath+"form.submission.delete",{subId:o._id})})}])},{}],5:[function(e,o,n){"use strict";angular.module("ngFormBuilderHelper").constant("RoleController",["$scope","FormioHelperConfig","$http",function(o,e,n){n.get(e.appUrl+"/role?limit=1000").then(function(e){o.roles=e.data})}])},{}],6:[function(e,o,n){"use strict";angular.module("ngFormBuilderHelper").directive("permissionEditor",["$q","SubmissionAccessLabels",function(e,o){var t=["create_all","read_all","update_all","delete_all","create_own","read_own","update_own","delete_own"];return{scope:{roles:"=",permissions:"=",waitFor:"="},restrict:"E",templateUrl:"formio-helper/formbuilder/permission/editor.html",link:function(r){(r.waitFor||e.when()).then(function(){var n=[];_.each(t,function(e){var o=_.find(r.permissions,{type:e});n.push(o||{type:e,roles:[]})}),r.permissions.splice.apply(r.permissions,[0,r.permissions.length].concat(n))}),r.getPermissionsToShow=function(){return r.permissions.filter(r.shouldShowPermission)},r.shouldShowPermission=function(e){return!!o[e.type]},r.getPermissionLabel=function(e){return o[e.type].label},r.getPermissionTooltip=function(e){return o[e.type].tooltip}}}}])},{}],7:[function(e,o,n){"use strict";angular.module("ngFormBuilderHelper").constant("FormioHelperConfig",{appUrl:"",tag:"common",perPage:10})},{}],8:[function(e,o,n){"use strict";angular.module("ngFormBuilderHelper",["formio","ngFormBuilder","ngFormioGrid","ngFormioHelper","ngTagsInput","ui.router","bgf.paginateAnything"]).constant("SubmissionAccessLabels",{read_all:{label:"Read All Submissions",tooltip:"The Read All Submissions permission will allow a user, with one of the given Roles, to read a Submission, regardless of who owns the Submission."},update_all:{label:"Update All Submissions",tooltip:"The Update All Submissions permission will allow a user, with one of the given Roles, to update a Submission, regardless of who owns the Submission. Additionally with this permission, a user can change the owner of a Submission."},delete_all:{label:"Delete All Submissions",tooltip:"The Delete All Submissions permission will allow a user, with one of the given Roles, to delete a Submission, regardless of who owns the Submission."},create_own:{label:"Create Own Submissions",tooltip:"The Create Own Submissions permission will allow a user, with one of the given Roles, to create a Submission. Upon creating the Submission, the user will be defined as its owner."},read_own:{label:"Read Own Submissions",tooltip:"The Read Own Submissions permission will allow a user, with one of the given Roles, to read a Submission. A user can only read a Submission if they are defined as its owner."},update_own:{label:"Update Own Submissions",tooltip:"The Update Own Submissions permission will allow a user, with one of the given Roles, to update a Submission. A user can only update a Submission if they are defined as its owner."},delete_own:{label:"Delete Own Submissions",tooltip:"The Delete Own Submissions permission will allow a user, with one of the given Roles, to delete a Submission. A user can only delete a Submission if they are defined as its owner."}}).run(["$templateCache",function(e){e.put("formio-helper/formbuilder/index.html",'<a ng-if="isAdministrator || formAccess([\'create_all\'])" ui-sref="{{ basePath }}createForm({formType: \'form\'})" class="btn btn-primary"><span class="glyphicon glyphicon-plus"></span> Create Form</a>\n<span class="glyphicon glyphicon-refresh glyphicon-spin" style="font-size: 2em;" ng-if="loading"></span>\n<table class="table table-striped" style="margin-top: 20px;">\n  <tbody>\n  <tr data-ng-repeat="form in forms" ng-if="isAdministrator || hasAccess(form.name, [\'create_own\', \'create_all\', \'read_all\', \'create_own\'])">\n    <td>\n      <div class="row">\n        <div class="col-sm-8">\n          <a ui-sref="{{ basePath }}form.view({formId: form._id})"><h5>{{ form.title }}</h5></a>\n        </div>\n        <div class="col-sm-4">\n          <div class="button-group pull-right" style="display:flex;">\n            <a ng-if="isAdministrator || hasAccess(form.name, [\'create_own\', \'create_all\'])" ui-sref="{{ basePath }}form.view({formId: form._id})" class="btn btn-default btn-xs">\n              <span class="glyphicon glyphicon-pencil"></span> Enter Data\n            </a>&nbsp;\n            <a ng-if="isAdministrator || hasAccess(form.name, [\'read_all\', \'create_own\'])" ui-sref="{{ basePath }}form.submissionIndex({formId: form._id})" class="btn btn-default btn-xs">\n              <span class="glyphicon glyphicon-list-alt"></span> View Data\n            </a>&nbsp;\n            <a ng-if="isAdministrator || formAccess([\'edit_all\', \'create_all\'])" ui-sref="{{ basePath }}form.edit({formId: form._id})" class="btn btn-default btn-xs">\n              <span class="glyphicon glyphicon-edit"></span> Edit Form\n            </a>&nbsp;\n            <a ng-if="isAdministrator || formAccess([\'delete_all\'])" ui-sref="{{ basePath }}form.delete({formId: form._id, formType: \'form\'})" class="btn btn-default btn-xs">\n              <span class="glyphicon glyphicon-trash"></span>\n            </a>\n          </div>\n        </div>\n      </div>\n    </td>\n  </tr>\n  </tbody>\n</table>\n<bgf-pagination\n  collection="forms"\n  url="formsUrl"\n  per-page="formsPerPage"\n  template-url="formio-helper/pager.html"\n></bgf-pagination>\n'),e.put("formio-helper/formbuilder/create.html","<h2>Create a Form</h2>\n<div ng-include=\"'formio-helper/formbuilder/edit.html'\"></div>\n"),e.put("formio-helper/formbuilder/delete.html",'<h2>Delete form {{ form.title }}</h2>\n<formio-delete src="formUrl"></formio-delete>\n'),e.put("formio-helper/formbuilder/edit.html",'<form role="form" novalidate>\n  <div class="row"> <br>\n      <div class="col-md-3 float-left">\n          <label for="formtype" class="control-label uppercase">Display Type</label>\n          <select class="form-control" name="form-display" id="form-display"\n              ng-options="display.name as display.title for display in formDisplays" ng-model="form.display"></select>\n      </div>\n      <div class="col-md-3 float-left">\n          <label for="formtype" class="control-label uppercase">Language</label>\n          <select class="form-control" name="form-lang" id="form-lang"\n              ng-options="lang.name as lang.title for lang in langs" ng-model="form.lang"></select> </div>\n      <div class="col-md-3 float-left">\n          <div id="form-group-title" class="form-group"> <label for="title"\n                  class="control-label uppercase">Title</label>\n              <input type="text" ng-model="form.title" ng-change="titleChange(\'{{form.title}}\')" class="form-control"\n                  id="title" placeholder="Enter the survey title" /> </div>\n      </div>\n      <div class="col-md-3 float-left">\n          <div id="form-group-name" class="form-group"> <label for="name" class="control-label uppercase">Name</label>\n              <input type="text" ng-model="form.name" class="form-control" id="name"\n                  placeholder="Enter the survey name (generated based on title)" /> </div>\n      </div>\n      <div class="col-md-3 float-left">\n          <div id="form-group-path" class="form-group"> <label for="path" class="control-label uppercase">Path</label>\n              <input type="text" class="form-control" id="path" ng-trim="false"\n                  ng-change="form.path = form.path.split(\' \').join(\'\')" ng-model="form.path" placeholder="example"\n                  text-transform: lowercase>\n          </div>\n          <input type="hidden" ng-model="form.type" />\n      </div>\n      <div ng-show="translating">\n          <div class="col-md-3 float-left">\n              <div id="form-group-path" class="form-group"> <label for="transTitle"\n                      class="control-label uppercase">Translate title</label>\n                  <input ng-show="showTransTitleIT" type="text" class="form-control" id="transTitleIT"\n                      ng-model="transTitleIT" ng-change="transTitleChange(transTitleIT)"\n                      placeholder="Translate the Survey title" text-transform: lowercase>\n                  <input ng-show="showTransTitleFR" type="text" class="form-control" id="transTitleFR"\n                      ng-model="transTitleFR" ng-change="transTitleChange(transTitleFR)"\n                      placeholder="Translate the Survey title" text-transform: lowercase>\n              </div>\n          </div>\n          <div class="col-md-3 float-left">\n              <label for="transtitlebutton" class="control-label uppercase">Translate to</label>\n              <input type="submit" class="btn btn-default" ng-click="translateTo(form.lang)"\n                  value="Import German Survey" />\n          </div>\n      </div>\n  </div>\n  <div ng-include="\'formio-helper/formbuilder/settings.html\'"></div> <br>\n  <form-builder form="form" src="formUrl"></form-builder>\n  <uib-accordion close-others="true">\n      <div class="hundred-fix">\n          <hr>\n      </div>\n      <div class="form-group pull-right float-left">\n          <div class="publish-fix">\n              <label class="control-label publish">Publish Survey</label>\n              <input type="checkbox" ng-model="publish" value="{{publish}}" ng-click="publicate(publish)"> </input>\n          </div>\n          <div class="form-group pull-right float-left">\n              <div class="publish-fix">\n                  <label class="control-label publish">Publish as Diary</label>\n                  <input type="checkbox" ng-model="diary" value="{{diary}}" ng-click="isDiary(diary)"> </input>\n              </div>\n              <div class="publish-fix">\n                  <label class="control-label publish">Is Relative</label>\n                  <input type="checkbox" ng-model="relative" value="{{relative}}" ng-click="isRelative(relative)">\n                  </input>\n              </div>\n              <a class="btn btn-default" ng-click="cancel()">Cancel</a>\n              <input type="submit" class="btn btn-primary" ng-click="saveForm()"\n                  value="{{formId ? \'Save\' : \'Create\'}} {{ capitalize(form.type)  }}" />\n              </br> </br>\n          </div>\n</form>'),e.put("formio-helper/formbuilder/form.html",'<h2>{{form.title}}</h2>\n<ul class="nav nav-tabs">\n  <li role="presentation" ng-if="isAdministrator || hasAccess(form.name, [\'create_own\', \'create_all\'])" ng-class="{active:isActive(basePath + \'form.view\')}"><a ui-sref="{{ basePath }}form.view()">Enter Data</a></li>\n  <li role="presentation" ng-if="isAdministrator || hasAccess(form.name, [\'read_own\', \'read_all\'])" ng-class="{active:isActive(basePath + \'form.submission\')}"><a ui-sref="{{ basePath }}form.submissionIndex()">View Data</a></li>\n  <li role="presentation" ng-if="isAdministrator || formAccess([\'edit_all\', \'create_all\'])" ng-class="{active:isActive(basePath + \'form.edit\')}"><a ui-sref="{{ basePath }}form.edit()">Edit Form</a></li>\n  <li role="presentation" ng-if="isAdministrator || formAccess([\'edit_all\', \'create_all\'])" ng-class="{active:isActive(basePath + \'form.action\')}"><a ui-sref="{{ basePath }}form.actionIndex()">Form Actions</a></li>\n  <li role="presentation" ng-if="isAdministrator || formAccess([\'edit_all\', \'create_all\'])" ng-class="{active:isActive(basePath + \'form.permission\')}"><a ui-sref="{{ basePath }}form.permission()">Access</a></li>\n</ul>\n<div ui-view></div>\n'),e.put("formio-helper/formbuilder/settings.html","\n"),e.put("formio-helper/formbuilder/view.html",'<formio src="formUrl" submission="submission" hide-components="hideComponents"></formio>\n'),e.put("formio-helper/formbuilder/action/add.html",'<formio form="actionInfo.settingsForm" submission="action"></formio>\n'),e.put("formio-helper/formbuilder/action/delete.html",'<formio-delete resource-name="\'action\'" form-action="actionUrl"></formio-delete>'),e.put("formio-helper/formbuilder/action/edit.html",'<formio form="actionInfo.settingsForm" submission="action" form-action="actionUrl"></formio>'),e.put("formio-helper/formbuilder/action/index.html",'<br/>\n<div class="panel panel-info">\n  <div class="panel-heading">\n    <a class="pull-right" href="http://help.form.io/userguide/#actions" target="_blank">\n      <i class="glyphicon glyphicon-question-sign "></i></a>\n\n    <h3 class="panel-title">Form Actions</h3>\n  </div>\n  <div class="panel-body">\n    <table class="table table-striped">\n      <thead>\n      <tr>\n        <th>Name</th>\n        <th>Operations</th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr data-ng-repeat="action in actions">\n        <td>\n          <span ng-if="!action._id">{{ action.title }}</span>\n          <a ng-if="action._id" ui-sref="{{ basePath }}form.action.edit({actionId: action._id})">{{ action.title }}</a>\n        </td>\n        <td>\n          <span ng-if="!action._id">none</span>\n\n          <div class="button-group" style="display:flex;" ng-if="action._id">\n            <a ui-sref="{{ basePath }}form.action.edit({actionId: action._id})" class="btn btn-default btn-xs"><span\n              class="glyphicon glyphicon-edit"></span></a>&nbsp;\n            <a ui-sref="{{ basePath }}form.action.delete({actionId: action._id})" class="btn btn-danger btn-xs"><span\n              class="glyphicon glyphicon-remove-circle"></span></a>\n          </div>\n        </td>\n      </tr>\n      </tbody>\n    </table>\n  </div>\n  <div class="panel-footer">\n    <form class="form-inline">\n      <div class="form-group">\n        <select id="action-select" name="action-select" ng-model="newAction" class="form-control"\n                ng-options="action as action.title for action in availableActions"></select>\n      </div>\n      <a ng-click="addAction()" class="btn btn-primary"><span class="glyphicon glyphicon-plus"></span> Add Action</a>\n    </form>\n  </div>\n</div>\n'),e.put("formio-helper/formbuilder/action/item.html",'<br/><ul class="nav nav-tabs action-nav">\n    <li role="presentation" ng-class="{active:isActive(basePath + \'form.action.edit\')}"><a ui-sref="{{ basePath }}form.action.edit()">Edit</a></li>\n    <li role="presentation" ng-class="{active:isActive(basePath + \'form.action.delete\')}"><a ui-sref="{{ basePath }}form.action.delete()">Delete</a></li>\n</ul>\n<div ui-view></div>\n'),e.put("formio-helper/formbuilder/action/view.html","TO-DO: Add actions view."),e.put("formio-helper/formbuilder/permission/editor.html",'<div ng-if="roles">\n  <table class="table table-striped">\n    <tbody>\n    <tr>\n      <th>Permission</th>\n      <th>Roles</th>\n    </tr>\n    <tr ng-repeat="permission in getPermissionsToShow()">\n      <td class="col-xs-3">\n        <label for="{{permission.type}}_role" form-builder-tooltip="{{getPermissionTooltip(permission)}}">{{getPermissionLabel(permission)}}</label>\n      </td>\n      <td class="col-xs-9">\n        <ui-select multiple ng-model="permission.roles" theme="bootstrap" reset-search-input="true" name="{{permission.type}}_role" id="{{permission.type}}_role">\n          <ui-select-match placeholder="Select roles...">{{$item.title}}</ui-select-match>\n          <ui-select-choices repeat="role._id as role in roles | filter: $select.search">\n          <div>{{ role.title }}</div>\n          </ui-select-choices>\n        </ui-select>\n      </td>\n    </tr>\n    </tbody>\n  </table>\n</div>\n'),e.put("formio-helper/formbuilder/permission/index.html",'<br/>\n<div class="panel panel-info">\n  <div class="panel-heading">\n    <h3 class="panel-title">User Permissions\n      <a class="pull-right" href="http://help.form.io/userguide/#permissions" target="_blank">\n        <i class="glyphicon glyphicon-question-sign "></i>\n      </a>\n    </h3>\n  </div>\n  <div class="panel-body">\n    <div class="well">\n      User Permissions allow you to control who can create, view, and modify form submissions. Here you may assign Project Roles to permissions. <strong>Roles</strong> can be created and edited in the <strong>config/default.json</strong> file.</a>.\n    </div>\n    <div ng-if="form._id">\n      <permission-editor permissions="form.submissionAccess" roles="roles" wait-for="loadFormPromise"></permission-editor>\n    </div>\n    <div class="form-group pull-right">\n      <a class="btn btn-default" ng-click="back()">Cancel</a>\n      <input type="submit" class="btn btn-primary" ng-click="saveForm()" value="Save Changes" />\n    </div>\n  </div>\n</div>\n'),e.put("formio-helper/formbuilder/submission/delete.html",'<formio-delete src="submissionUrl"></formio-delete>\n'),e.put("formio-helper/formbuilder/submission/edit.html",'<formio src="submissionUrl"></formio>\n'),e.put("formio-helper/formbuilder/submission/index.html",'<div class="well submissions-header">\n  <a class="btn btn-default" href="{{ formio.formUrl }}/export?format=json&x-jwt-token={{ token }}">Export JSON</a>\n  <a class="btn btn-default" href="{{ formio.formUrl }}/export?format=csv&x-jwt-token={{ token }}">Export CSV</a>\n</div>\n<div class="well" ng-if="isAdministrator">\n  To control which fields show up in this table, use the "Table View" setting on each field under "Edit Form".\n</div>\n<formio-grid src="formUrl"></formio-grid>\n'),e.put("formio-helper/formbuilder/submission/item.html",'<ul class="nav nav-pills submission-nav" style="margin-top:20px;">\n  <li role="presentation" ng-class="{active:isActive(basePath + \'form.submission.view\')}"><a ui-sref="{{ basePath }}form.submission.view()">View Submission</a></li>\n  <li role="presentation" ng-class="{active:isActive(basePath + \'form.submission.edit\')}"><a ui-sref="{{ basePath }}form.submission.edit()">Edit Submission</a></li>\n  <li role="presentation" ng-class="{active:isActive(basePath + \'form.submission.delete\')}"><a ui-sref="{{ basePath }}form.submission.delete()">Delete Submission</a></li>\n</ul>\n<div ui-view style="margin-top: 20px;"></div>\n'),e.put("formio-helper/formbuilder/submission/view.html",'<formio-submission form="form" submission="submission" read-only="true"></formio-submission>\n')}]),e("./controllers/FormActionController.js"),e("./controllers/FormController.js"),e("./controllers/FormIndexController.js"),e("./controllers/FormSubmissionController.js"),e("./controllers/RoleController.js"),e("./directives/permissionEditor.js"),e("./factories/FormioHelperConfig.js"),e("./providers/FormioFormBuilder.js")},{"./controllers/FormActionController.js":1,"./controllers/FormController.js":2,"./controllers/FormIndexController.js":3,"./controllers/FormSubmissionController.js":4,"./controllers/RoleController.js":5,"./directives/permissionEditor.js":6,"./factories/FormioHelperConfig.js":7,"./providers/FormioFormBuilder.js":9}],9:[function(e,o,n){"use strict";angular.module("ngFormBuilderHelper").provider("FormioFormBuilder",["$stateProvider","FormioHelperConfig",function(l,m){return{register:function(e,o,n){var r=(n=n||{}).templates?n.templates:{},s=n.controllers?n.controllers:{},a=n.base?n.base:"";a=a||(e?e+".":""),m.appUrl=o,m.tag=n.tag||"common",m.perPage=n.perPage||10;function t(i){return function(e,o,n){e.basePath=a,e.statePath=i;var r=angular.injector(["ng"]).get("$q").defer();n&&(o(n,{$scope:e}),r.resolve(e.isCopy),e.isCopy&&(console.log(e.form),e.copyOutsite(e)));var t=_.get(s,i);t&&o(t,{$scope:e})}}l.state(a+"formIndex",{url:"/forms",ncyBreadcrumb:{skip:!0},templateUrl:_.get(r,"form.index","formio-helper/formbuilder/index.html"),controller:["$scope","$controller","FormIndexController",t("form.index")]}).state(a+"createForm",{url:"/create/:formType",ncyBreadcrumb:{skip:!0},templateUrl:_.get(r,"form.create","formio-helper/formbuilder/create.html"),controller:["$scope","$controller","FormController",t("form.create")],params:{formType:"form",components:null,de:null,fr:null,it:null}}).state(a+"form",{abstract:!0,url:"/form/:formId",ncyBreadcrumb:_.get(n,"breadcrumb.form",{skip:!0}),templateUrl:_.get(r,"form.abstract","formio-helper/formbuilder/form.html"),controller:["$scope","$controller","FormController",t("form.abstract")]}).state(a+"form.view",{url:"/",ncyBreadcrumb:{skip:!0},templateUrl:_.get(r,"form.view","formio-helper/formbuilder/view.html"),controller:["$scope","$controller",t("form.view")]}).state(a+"form.edit",{url:"/edit",ncyBreadcrumb:{skip:!0},templateUrl:_.get(r,"form.edit","formio-helper/formbuilder/edit.html"),controller:["$scope","$controller","FormController",t("form.edit")],params:{formType:"form",formId:"formId",form:null,isCopy:!1,pageNum:null,components:null,de:null,fr:null,it:null}}).state(a+"form.delete",{url:"/delete",ncyBreadcrumb:{skip:!0},templateUrl:_.get(r,"form.delete","formio-helper/formbuilder/delete.html"),controller:["$scope","$controller",t("form.delete")]});var i={};i[a+"form.submission"]={name:"submission",id:"subId",controller:["$scope","$controller","FormSubmissionController",t("submission.index")]},i[a+"form.action"]={name:"action",id:"actionId",controller:["$scope","$controller","FormActionController",t("action.index")]},angular.forEach(i,function(e,o){l.state(o+"Index",{url:"/"+e.name,ncyBreadcrumb:{skip:!0},templateUrl:_.get(r,e.name+".index","formio-helper/formbuilder/"+e.name+"/index.html"),controller:e.controller}).state(o,{abstract:!0,ncyBreadcrumb:_.get(n,"breadcrumb."+e.name,{skip:!0}),url:"/"+e.name+"/:"+e.id,controller:e.controller,templateUrl:_.get(r,e.name+".abstract","formio-helper/formbuilder/"+e.name+"/item.html")}).state(o+".view",{url:"",ncyBreadcrumb:{skip:!0},templateUrl:_.get(r,e.name+".view","formio-helper/formbuilder/"+e.name+"/view.html"),controller:["$scope","$controller",t(e.name+".view")]}).state(o+".edit",{url:"/edit",ncyBreadcrumb:{skip:!0},templateUrl:_.get(r,e.name+".edit","formio-helper/formbuilder/"+e.name+"/edit.html"),controller:["$scope","$controller",t(e.name+".edit")]}).state(o+".delete",{url:"/delete",ncyBreadcrumb:{skip:!0},templateUrl:_.get(r,e.name+".delete","formio-helper/formbuilder/"+e.name+"/delete.html"),controller:["$scope","$controller",t(e.name+".delete")]})}),l.state(a+"form.action.add",{url:"/add/:actionName",ncyBreadcrumb:{skip:!0},templateUrl:_.get(r,"action.add","formio-helper/formbuilder/action/add.html"),controller:["$scope","$controller","FormActionController",t("action.add")],params:{actionInfo:null}}),l.state(a+"form.permission",{url:"/permission",ncyBreadcrumb:{skip:!0},templateUrl:_.get(r,"permission.index","formio-helper/formbuilder/permission/index.html"),controller:["$scope","$controller","RoleController",t("permission.index")]})},$get:function(){return{}}}}])},{}]},{},[8]);